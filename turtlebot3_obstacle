#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
import rospy
import math
import random

from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from time import sleep


LINEAR_VEL = 0.22
STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
sum_speed = 0

#Function for getting odometry reported speed
def callback(data):
        rospy.logerr("Linear speed as reported by odometer: %f", data.twist.twist.linear.x)

class Obstacle():
    def __init__(self,):
        rospy.Subscriber('/odom', Odometry, callback)
        collision_counter = 0
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle(collision_counter)
        
    

    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        front_cone = []
        left_cone = []
        right_cone = []
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
            
        #front_cone = 330 - 30
        for i in range(30):
            front_cone.append(scan.ranges[330+i])
        for i in range(30):
            front_cone.append(scan.ranges[i])

        #left_cone = 300 - 330
        #right_cone = 30 - 60
        for i in range(30):
            left_cone.append(scan.ranges[300+i])
            right_cone.append(scan.ranges[30+i])

        scan_filter.append(front_cone)
        scan_filter.append(right_cone)
        scan_filter.append(left_cone)

        for i in range(3):
            for j in range(len(scan_filter[i])):
                if math.isnan(scan_filter[i][j]):
                    scan_filter[i][j] = 0.7

                elif scan_filter[i][j] == 0:
                    scan_filter[i][j] = 0.7

        return scan_filter

    def update_speed(self, x, z, lidar_distances):
        twist = Twist()
        twist.linear.x = x
        global sum_speed
        
        if(z == 1):
            if(min(lidar_distances[1]) <= 0.225):
                rospy.loginfo("Turning right sharply")
                twist.linear.x=0.20
                twist.angular.z = 2.5
            else:
                rospy.loginfo("Turning right gently")
                twist.linear.x=0.21
                twist.angular.z = 2.25
        elif(z == -1):
            if(min(lidar_distances[2]) <= 0.225):
                rospy.loginfo("Turning left sharply")
                twist.linear.x=0.20
                twist.angular.z = -2.5
            else:
                rospy.loginfo("Turning left gently")
                twist.linear.x=0.21
                twist.angular.z = -2.25
        self._cmd_pub.publish(twist)
        
        sum_speed += twist.linear.x
        rospy.loginfo("Moving at speed: %f", twist.linear.x)

    
    def anti_stuck(self, z):
        twist = Twist()
        twist.linear.x = 0.0
        if(z == 1):
            rospy.loginfo("Turning left")
            twist.angular.z = 1
        elif(z == -1):
            rospy.loginfo("Turning right")
            twist.angular.z = -1
        
        self._cmd_pub.publish(twist)

    def obstacle(self, collision_counter):
        loop_counter = 0
        avg_speed = 0
        while not rospy.is_shutdown():
            loop_counter += 1
            rospy.logwarn("Loop number: %d", loop_counter)
            rospy.logerr("Average speed: %f", avg_speed)

            #scan the cones
            lidar_distances = self.get_scan()
            rospy.loginfo('min front: %f', min(lidar_distances[0]))
            rospy.loginfo('min left: %f', min(lidar_distances[1]))
            rospy.loginfo('min right %f', min(lidar_distances[2]))
            min_distance = min(lidar_distances[0])


            #Check for collision
            #A collision from the front and the side at the same time is just counted as one collision
            if(min_distance <= 0.095):
                collision_counter += 1
                rospy.loginfo('Total collisions: %d', collision_counter)

            elif(min(lidar_distances[1]) <= 0.1 or min(lidar_distances[2]) <= 0.1):
                collision_counter += 1
                rospy.loginfo('Total collisions: %d', collision_counter)


            if 0 < min_distance < 0.35:                   
                #Turning right
                if (min(lidar_distances[1]) > 0.35 and min(lidar_distances[1])>= min(lidar_distances[2])) and min(lidar_distances[0])>0.2:
                    self.update_speed(LINEAR_VEL, 1, lidar_distances)

                #Turning left
                elif (min(lidar_distances[2]) > 0.35 and min(lidar_distances[2])>= min(lidar_distances[1])) and min(lidar_distances[0])>0.2:
                    self.update_speed(LINEAR_VEL, -1, lidar_distances)
                
                #Anti stuck algorithm
                elif min(lidar_distances[0])<0.22 or (min(lidar_distances[2]) and min(lidar_distances[1]))<0.12:
                    if min(lidar_distances[1])>min(lidar_distances[2]):
                        self.anti_stuck(1)
                    else:
                        self.anti_stuck(-1)
                    while True:
                        lidar_distances = self.get_scan()
                        lidar_distances[0] = lidar_distances[0][20:-20]
                        if max(lidar_distances[0]) > 0.25:
                            break
                        loop_counter += 1
                else:
                    curr_velocity = self.update_speed(LINEAR_VEL, 0, lidar_distances)

            else:
                curr_velocity = self.update_speed(LINEAR_VEL, 0, lidar_distances)
            
            avg_speed = sum_speed/loop_counter
            

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()